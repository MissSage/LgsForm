{
  "Create a CRUD template": {
    "scope": "",
    "prefix": "crud",
    "body": [
      "<template>",
      "<div class='wrapper'>",
      "<SLCardSearch :config='slCardSearchConfig'></SLCardSearch>",
      "<SLCardTable :config='slCardTableConfig'></SLCardTable>",
      "<SLDialogForm ref='refSLDialogForm' :config='slDialogFormConfig'></SLDialogForm>",
      "</div>",
      "</template>",
      "<script lang='ts'>",
      "import SLCardTable from '@/components/SLCardTable/index.vue'",
      "import SLCardSearch from '@/components/SLCardSearch/index.vue'",
      "import { defineComponent, reactive, ref, toRefs } from 'vue'",
      "import { ISLCardSearch } from '@/components/SLCardSearch/type'",
      "import { ISLCardTable } from '@/components/SLCardTable/type'",
      "import SLDialogForm from '@/components/SLDialogForm/index.vue'",
      "import { ISLDialogFormConfig } from '@/components/SLDialogForm/type'",
      "import { IQueryBase } from '../../types/common'",
      "import { DeleteInvests, GetInvestList } from '@/api/yinshou/baobiao/InvestStatistics'",
      "import { COLORS, ICONS } from '@/common/constans/common'",
      "import { SLConfirm, SLMessage } from '@/utils/Message'",
      "export default defineComponent({",
      "  name: '$TM_FILENAME_BASE',",
      "components: { SLCardTable, SLCardSearch, SLDialogForm },",
      "setup() {",
      "const refSLDialogForm = ref<InstanceType<typeof SLDialogForm>>()",
      "const state = reactive<{",
      "slCardTableConfig: ISLCardTable",
      "slCardSearchConfig: ISLCardSearch",
      "slDialogFormConfig: ISLDialogFormConfig",
      "}>({",
      "slCardSearchConfig: {",
      "filters: [],",
      "rightOperations: []",
      "},",
      "slCardTableConfig: {",
      "columns: [],",
      "dataList: [],",
      "selectList: [],",
      "pagination: {},",
      "operations: [",
      "{",
      "type: 'text',",
      "icon: ICONS.EDIT,",
      "color: COLORS.EDIT,",
      "click: (row: any) => openDialog(row)",
      "},",
      "{",
      "type: 'text',",
      "icon: ICONS.DELETE,",
      "color: COLORS.DELETE,",
      "click: (row: any) => handleDelete(row)",
      "}",
      "],",
      "title: '',",
      "headerBtns: []",
      "},",
      "slDialogFormConfig: {",
      "dialogConfig: {",
      "confirm: {",
      "handler: async () => {",
      "await refSLDialogForm.value?.refSLForm?.Submit()",
      "refreshData()",
      "SLMessage.success('提交成功！')",
      "},",
      "show: true",
      "},",
      "cancel: {",
      "handler: async () => {",
      "state.slDialogFormConfig.dialogConfig.visible = false",
      "}",
      "}",
      "},",
      "formConfig: { columns: [] }",
      "}",
      "})",
      "const openDialog = (row?: any) => {",
      "console.log(row)",
      "",
      "}",
      "const handleDelete = (row?: any) => {",
      "SLConfirm('确定删除吗？', '删除提示').then(async () => {",
      "const ids: string[] = row",
      "? [row?.id || '']",
      ": state.slCardTableConfig.selectList?.map(item => item.id) || []",
      "await DeleteInvests(ids)",
      "SLMessage.success('删除成功！')",
      "refreshData()",
      "})",
      "}",
      "const refreshData = async () => {",
      "const params: IQueryBase = {",
      "page: state.slCardTableConfig.pagination?.page,",
      "size: state.slCardTableConfig.pagination?.limit",
      "}",
      "const { total, data } = await GetInvestList(params)",
      "state.slCardTableConfig.dataList = data",
      "state.slCardTableConfig.pagination && (state.slCardTableConfig.pagination.total = total)",
      "}",
      "return {",
      "...toRefs(state)",
      "}",
      "}",
      "})",
      "</script>",
      "<style scoped lang='scss'>",
      ".wrapper {",
      "padding: 15px;",
      "width: 100%;",
      "height: 100%;",
      "}",
      "</style>"
    ]
  }
}